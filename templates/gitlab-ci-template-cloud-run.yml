# This GitLab template contains all the jobs needed to deploy a Google Cloud Run application.
# You can find the official page of the service here: https://cloud.google.com/run
#
# You only need to configure some variables in order to correctly deploy your application.
# The runner must have all the required roles/permissions as described here:
# https://cloud.google.com/run/docs/reference/iam/roles#additional-configuration
#
# We have defined two deployment strategies to make it possible for the developers to deploy in two different ways:
# - manual: the last deploy job will be triggered manually from the pipeline
# - automatic: the last deploy job will be triggered automatically when after all the other jobs will have succeeded
# To configure the branches with the desired deployment strategy read the documentation below about variables (`BRANCHES_MANUAL_DEPLOYMENT` and `BRANCHES_AUTOMATIC_DEPLOYMENT`).
#
# Remember that only on the `DEPLOYMENT_MAIN_BRANCH` branch the deploy job and the update traffic job will be automatically created.
# If you need to deploy on other branches you have to create the jobs manually using the `extends` keyword to inherit the configuration from the `.deploy_template` and `.update_traffic_template` templates.
#
# Mandatory variables:
# - APP_NAME: the name for the application; it is used also as the name of the container image and the Google Cloud Run deployment (e.g. `my-awesome-app`)
# - GCP_PROJECT_ID: the Google Cloud project id (e.g. `my-sample-project-191923`)
#
# Optional variables:
# - GCP_REGION: the region in which the resource can be found (e.g. `europe-west1`) - Default: `europe-west1`
# - DEPLOYMENT_MAIN_BRANCH: the branch for which the deploy job will be created (e.g. `production`) - Default: `main`
# - DOCKER_IMAGE_NAME: the name for the docker image name (e.g. `my-awesome-app-main`) - Default: `${APP_NAME}-${CI_COMMIT_REF_SLUG}`
# - IMAGE_REGISTRY: the fqdn of the image registry (e.g. `europe-west1-docker.pkg.dev`) - Default: `europe-west1-docker.pkg.dev`
# - IMAGE_REPOSITORY: the name of the image repository or namespace (e.g. `my-awesome/namespace`) - Default: `${GCP_PROJECT_ID}/sparkfabrik-applications`
# - CI_REGISTRY_IMAGE_TAG: the tag for the docker image (e.g. `latest`) - Default: `${CI_COMMIT_SHORT_SHA}`
# - PORT: the port used by the web server to listen for connections (e.g. `8080`) - Default: `80`
# - DOCKERFILE: the Dockerfile used to build the image (e.g. `Dockerfile.production`) - Default: `Dockerfile`
# - SERVICE_ACCOUNT: the service account used by the application when it runs on Google Cloud Run (e.g. `my-low-privileged-service-account`) - Default: default Compute Engine service account as described here: https://cloud.google.com/run/docs/configuring/service-accounts
# - CLOUD_RUN_ENV_VARS: the environment variables use to deploy the application in Google Cloud Run (e.g. `SITE_LOCALE=${SITE_LOCALE},COMMIT_SLUG=${CI_COMMIT_REF_SLUG}`) - Default:
# - CLOUD_RUN_DEPLOY_RAW_OPTIONS: the raw options used to deploy the application in Google Cloud Run (e.g. `--memory 100Mi --async`) - Default:
# - UPDATE_TRAFFIC: this toggle controls if the final job enforcing the traffic routing to the latest deployed revision should be executed or not - Default: `1`
# - CLOUD_RUN_INGRESS: the ingress used to deploy the application in Google Cloud Run (e.g. internal). Go to the official documentation here https://cloud.google.com/sdk/gcloud/reference/run/deploy#--ingress to have more information - Default: `all`
#
# Autogenerated variables:
# - CI_REGISTRY_IMAGE_BASE_URL: the full URL of the docker image. The value is the composition of other variables - Default: `${IMAGE_REGISTRY}/${IMAGE_REPOSITORY}`
# - CI_REGISTRY_IMAGE: the full name of the docker image - Default: ${CI_REGISTRY_IMAGE_BASE_URL}/${DOCKER_IMAGE_NAME}:${CI_REGISTRY_IMAGE_TAG}
# - DEPLOYMENT_NAME: the name of the Google Cloud Run deployment - Default: ${APP_NAME}-${CI_COMMIT_REF_SLUG}
#
# You can override the variables generated automatically according to your needs.

include:
  - remote: "https://raw.githubusercontent.com/sparkfabrik/spark-k8s-deployer/master/templates/.gitlab-ci-template.yml"

stages:
  - test
  - build
  - deploy

variables:
  CLOUDSDK_CORE_DISABLE_PROMPTS: 1 # Disable all interactive prompts for gcloud (https://cloud.google.com/sdk/gcloud/reference#--quiet)
  DOCKER_BUILDKIT: 1 # Docker build enhancements using Buildkit (https://docs.docker.com/develop/develop-images/build_enhancements/)
  GCP_REGION: europe-west1
  DEPLOYMENT_MAIN_BRANCH: main
  DOCKER_IMAGE_NAME: ${APP_NAME}-${CI_COMMIT_REF_SLUG}
  IMAGE_REGISTRY: europe-west1-docker.pkg.dev
  IMAGE_REPOSITORY: ${GCP_PROJECT_ID}/sparkfabrik-applications
  CI_REGISTRY_IMAGE_BASE_URL: ${IMAGE_REGISTRY}/${IMAGE_REPOSITORY}
  CI_REGISTRY_IMAGE_TAG: ${CI_COMMIT_SHORT_SHA}
  CI_REGISTRY_IMAGE: ${CI_REGISTRY_IMAGE_BASE_URL}/${DOCKER_IMAGE_NAME}:${CI_REGISTRY_IMAGE_TAG}
  DEPLOYMENT_NAME: ${APP_NAME}-${CI_COMMIT_REF_SLUG}
  PORT: 80
  DOCKERFILE: Dockerfile
  UPDATE_TRAFFIC: 1
  CLOUD_RUN_INGRESS: all
  # SERVICE_ACCOUNT:
  # CLOUD_RUN_ENV_VARS:
  # CLOUD_RUN_DEPLOY_RAW_OPTIONS:

# Pipelines runs only for branches.
#
# This also remove duplicated detached pipeline created with a merge
# request or when adding a tag.
workflow:
  rules:
    - if: $CI_COMMIT_BRANCH

.export_vars:
  script:
    # If the SERVICE_ACCOUNT variable is not defined, the `gcloud` command will be executed without `--service-account` option.
    - |
      if [ -n "${SERVICE_ACCOUNT}" ]; then
        export SERVICE_ACCOUNT_OPT="--service-account ${SERVICE_ACCOUNT}"
      else
        export SERVICE_ACCOUNT_OPT=""
      fi
    # If the CLOUD_RUN_ENV_VARS variable is not defined, the `gcloud` command will be executed without `--set-env-vars=` option.
    - |
      if [ -n "${CLOUD_RUN_ENV_VARS}" ]; then
        export CLOUD_RUN_ENV_VARS_OPT="--set-env-vars=${CLOUD_RUN_ENV_VARS}"
      else
        export CLOUD_RUN_ENV_VARS_OPT=""
      fi

.print_vars:
  script:
    - |
      export PAD_LEN=40
      printf "\e[1mConfigured variables:\e[0m\n"
      for VAR_NAME in "APP_NAME" "GCP_PROJECT_ID" "GCP_REGION" "DEPLOYMENT_MAIN_BRANCH" \
        "DOCKER_IMAGE_NAME" "IMAGE_REGISTRY" "IMAGE_REPOSITORY" "CI_REGISTRY_IMAGE_BASE_URL" "CI_REGISTRY_IMAGE_TAG" "CI_REGISTRY_IMAGE" \
        "DEPLOYMENT_NAME" "PORT" "CLOUD_RUN_INGRESS" "DOCKERFILE" "SERVICE_ACCOUNT" "SERVICE_ACCOUNT_OPT" \
        "CLOUD_RUN_ENV_VARS" "CLOUD_RUN_ENV_VARS_OPT" "CLOUD_RUN_DEPLOY_RAW_OPTIONS"; do
        printf "%-${PAD_LEN}s \e[1m%s\e[0m\n" "${VAR_NAME}" "${!VAR_NAME}"
      done
    # Please remember to keep the following `gcloud run deploy` command in sync with the one in the `.deploy_template` job.
    - |
      printf "\e[1mThe final 'gcloud run deploy' command will be:\e[0m\n"
      echo "gcloud run deploy ${DEPLOYMENT_NAME} --image=${CI_REGISTRY_IMAGE} --region ${GCP_REGION} --platform managed --allow-unauthenticated --project ${GCP_PROJECT_ID} --port=${PORT} --ingress=${CLOUD_RUN_INGRESS} ${SERVICE_ACCOUNT_OPT} ${CLOUD_RUN_ENV_VARS_OPT} ${CLOUD_RUN_DEPLOY_RAW_OPTIONS}"

.build_template:
  script:
    - docker build --build-arg PORT=${PORT} -t ${CI_REGISTRY_IMAGE} -f ${DOCKERFILE} .
    - mkdir -p ./docker-images
    - docker save --output ./docker-images/${DOCKER_IMAGE_NAME}.tar ${CI_REGISTRY_IMAGE}
  artifacts:
    expire_in: 1 hrs
    paths:
      - ./docker-images

.load_and_push_template:
  script:
    - docker load --input ./docker-images/${DOCKER_IMAGE_NAME}.tar
    - docker push ${CI_REGISTRY_IMAGE}

.deploy_template:
  script:
    - !reference [.export_vars, script]
    - !reference [.print_vars, script]
    - !reference [.load_and_push_template, script]
    # Please remember to keep the following `gcloud run deploy` command in sync with the one in the `.print_vars` job.
    - gcloud run deploy ${DEPLOYMENT_NAME} --image=${CI_REGISTRY_IMAGE}
      --region ${GCP_REGION} --platform managed --allow-unauthenticated --project ${GCP_PROJECT_ID} --port=${PORT}  --ingress=${CLOUD_RUN_INGRESS}
      ${SERVICE_ACCOUNT_OPT} ${CLOUD_RUN_ENV_VARS_OPT} ${CLOUD_RUN_DEPLOY_RAW_OPTIONS}

.update_traffic_template:
  script:
    - gcloud run services update-traffic ${DEPLOYMENT_NAME} --region ${GCP_REGION} --project ${GCP_PROJECT_ID} --to-latest

test variables:
  stage: test
  script:
    - |
      if [ -z "${APP_NAME}" ]; then
        echo -e "\e[1m\e[31mYou have to define the APP_NAME variable\e[0m"
        exit 1
      fi
    - |
      if [ -z "${GCP_PROJECT_ID}" ]; then
        echo -e "\e[1m\e[31mYou have to define the GCP_PROJECT_ID variable\e[0m"
        exit 1
      fi
    - !reference [.export_vars, script]
    - !reference [.print_vars, script]

build:
  stage: build
  extends: .build_template

# The following jobs run only for the branch defined in the `DEPLOYMENT_MAIN_BRANCH` variable.
deploy:
  stage: deploy
  extends:
    - .deploy_template
  rules:
    - if: "$CI_COMMIT_REF_SLUG == $DEPLOYMENT_MAIN_BRANCH"

update traffic:
  stage: deploy
  needs:
    - deploy
  extends:
    - .update_traffic_template
  rules:
    - if: "$CI_COMMIT_REF_SLUG == $DEPLOYMENT_MAIN_BRANCH && $UPDATE_TRAFFIC == '1'"
