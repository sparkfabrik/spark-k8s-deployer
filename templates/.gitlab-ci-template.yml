image: ${DEFAULT_IMAGE_REGISTRY}/${DEFAULT_IMAGE_REPOSITORY}:${DEFAULT_IMAGE_TAG}

# MTU configuration: https://docs.gitlab.com/runner/executors/kubernetes/troubleshooting.html#curl-35-openssl-ssl_connect-ssl_error_syscall-in-connection-to-githubcom443
services:
  - name: ${DOCKER_PROXY_IMAGE_REGISTRY}/${DOCKER_PROXY_IMAGE_REPOSITORY}:${DOCKER_PROXY_IMAGE_TAG}
    alias: docker-proxy
    command:
      [
        "--registry=https://europe-west1-docker.pkg.dev/spark-int-cloud-services/docker-hub-mirror",
        "--listen=0.0.0.0:5000",
      ]
  - name: docker:26.1.0-dind-alpine3.19
    command:
      [
        "--registry-mirror",
        "http://docker-proxy:5000/spark-int-cloud-services/docker-hub-mirror/",
        "--registry-mirror",
        "https://mirror.gcr.io",
        "--insecure-registry",
        "docker-proxy:5000",
        "--mtu=1460",
        "--network-control-plane-mtu=1460",
        "--default-network-opt=bridge=com.docker.network.driver.mtu=1460",
      ]
variables:
  # Default image configuration.
  # You can override these variables in your project's .gitlab-ci.yml file
  # to change the image used for the jobs.
  DEFAULT_IMAGE_REGISTRY: ghcr.io
  DEFAULT_IMAGE_REPOSITORY: sparkfabrik/spark-k8s-deployer
  DEFAULT_IMAGE_TAG: latest
  # Docker-proxy image configuration.
  # You can override these variables in your project's .gitlab-ci.yml file
  # to change the image used for docker-proxy service.
  DOCKER_PROXY_IMAGE_REGISTRY: ghcr.io
  DOCKER_PROXY_IMAGE_REPOSITORY: sparkfabrik/gcp-artifact-registry-docker-proxy
  DOCKER_PROXY_IMAGE_TAG: latest
  # When using dind service, we need to instruct docker to talk with
  # the daemon started inside of the service. The daemon is available
  # with a network connection instead of the default
  # /var/run/docker.sock socket.
  DOCKER_HOST: tcp://docker:2376
  #
  # The 'docker' hostname is the alias of the service container as described at
  # https://docs.gitlab.com/ee/ci/docker/using_docker_images.html#accessing-the-services.
  # If you're using GitLab Runner 12.7 or earlier with the Kubernetes executor and Kubernetes 1.6 or earlier,
  # the variable must be set to tcp://localhost:2376 because of how the
  # Kubernetes executor connects services to the job container
  # DOCKER_HOST: tcp://localhost:2376
  #
  # Specify to Docker where to create the certificates, Docker will
  # create them automatically on boot, and will create
  # `/certs/client` that will be shared between the service and job
  # container, thanks to volume mount from config.toml
  DOCKER_TLS_CERTDIR: "/certs"
  # These are usually specified by the entrypoint, however the
  # Kubernetes executor doesn't run entrypoints
  # https://gitlab.com/gitlab-org/gitlab-runner/-/issues/4125
  DOCKER_TLS_VERIFY: 1
  DOCKER_CERT_PATH: "$DOCKER_TLS_CERTDIR/client"
  #
  # Variable added to fix Docker in Docker https://github.com/docker-library/docker/issues/463
  DOCKER_IPTABLES_LEGACY: 1
  # Variables for defining dev team access to the deployment namespace.
  # Currently, only development/review branches in GCP are supported; groups
  # are supported as long as "Google Groups for RBAC" are enabled on the target
  # cluster.
  # See `scripts/templates/rbac` for role definitions.
  # Values should be comma-separated lists of users and groups.
  DEV_VIEWER_USERS: ""
  DEV_VIEWER_GROUPS: ""
  DEV_DEVELOPER_USERS: ""
  DEV_DEVELOPER_GROUPS: ""

.global-setup:
  # https://gitlab.com/gitlab-org/gitlab-runner/-/issues/27384#note_497228752
  before_script: &script-global-docker-wait
    - |
      # # Function for starting the Gitlab section
      # function section_start () {
      #   local section_title="${1}"
      #   local section_description="${2:-$section_title}"

      #   echo -e "section_start:`date +%s`:${section_title}[collapsed=true]\r\e[0K${section_description}"
      # }

      # # Function for ending the Gitlab section
      # function section_end () {
      #   local section_title="${1}"

      #   echo -e "section_end:`date +%s`:${section_title}\r\e[0K"
      # }

      PAD_LEN=${PAD_LEN:-40}

      # Print general information
      section_start "info" "General information"
      echo "The current date is: $(date)"
      section_end "info"

      if command -v docker &> /dev/null; then
        section_start "docker" "Configure Docker services"

        if [ -f "/tmp/.docker/config.custom.json" ]; then
          FINAL_DOCKER_CONFIG_DIR="${HOME:-"/root"}/.docker"
          echo "Custom Docker configuration found, copying it to ${FINAL_DOCKER_CONFIG_DIR}/config.json"
          if [ ! -d "${FINAL_DOCKER_CONFIG_DIR}" ]; then
            mkdir -p "${FINAL_DOCKER_CONFIG_DIR}"
          fi
          cp /tmp/.docker/config.custom.json "${FINAL_DOCKER_CONFIG_DIR}/config.json"
        fi

        for i in $(seq 1 30); do
          docker info && break
          echo "Waiting for docker to start..."
          sleep 1s
        done

        if [ "${DOCKER_USE_BUILDX:-1}" = "1" ]; then
          echo "Configure buildx..."
          docker context create build-multiarch
          docker buildx create build-multiarch --name buildx-builder --bootstrap --use
          docker buildx ls
        fi

        if command -v docker-compose &> /dev/null; then
          docker-compose version
        fi

        section_end "docker"
      fi

      if command -v gcloud &> /dev/null; then
        section_start "gcloud" "Gcloud authentication setup"
        gcloud version
        gcloud auth configure-docker --quiet
        gcloud auth configure-docker europe-west1-docker.pkg.dev --quiet
        if command -v jq &> /dev/null; then
          echo "The following docker credHelpers are configured:"
          jq '.credHelpers' ~/.docker/config.json
        fi
        printf "\n\n%-${PAD_LEN}s \e[1m%s\e[0m\n\n" "GCP Auth user (workload identity):" $(gcloud auth list --filter=status:ACTIVE --format="value(account)")
        section_end "gcloud"
      fi

      # Test Docker mirrors
      section_start "test-docker-proxy" "Test Docker proxy"
      echo "Test docker-proxy GitLab service"
      if ! nc -w10 -zv docker-proxy 5000; then
        echo "docker-proxy service not available"
      else
        echo "docker-proxy service available"
      fi
      echo "Test GCP mirror.gcr.io"
      if ! nc -w10 -zv mirror.gcr.io 443; then
        echo "mirror.gcr.io service not available"
      else
        echo "mirror.gcr.io service available"
      fi
      section_end "test-docker-proxy"

      # If the job is running using `spark-k8s-deployer`, source the common
      # functions and execute initialization setup.
      if [ -r "/scripts/src/common.bash" ] && [ -r "/scripts/src/functions.bash" ]; then
        source "/scripts/src/common.bash"
        source "/scripts/src/functions.bash"

        # Switch to the GitLab Agent context if needed.
        section_start "gitlab-agent" "Setup gitlab agent"
        setup-gitlab-agent
        section_end "gitlab-agent"

        # Print some useful job info.
        section_start "job-info" "Print useful job information"
        print_job_info
        section_end "job-info"

        # Handle debug sleep.
        section_start "debug-sleep" "Print debug information"
        print_debug_sleep_help

        # Default to 1 hour if not set
        DEBUG_JOB_SLEEP_SECONDS="${DEBUG_JOB_SLEEP_SECONDS:-3600}"
        if [ "${DEBUG_JOB_SLEEP}" = "1" ] && [ "${DEBUG_JOB_SLEEP_JOB_NAME}" = "${CI_JOB_NAME_SLUG}" ]; then
          echo "Sleeping for ${DEBUG_JOB_SLEEP_SECONDS} seconds..."
          sleep "${DEBUG_JOB_SLEEP_SECONDS}"
        fi
        section_end "debug-sleep"
      fi

before_script:
  - *functions-gitlab-sections
  - *script-global-docker-wait

include: 
  - remote: "https://raw.githubusercontent.com/sparkfabrik/spark-k8s-deployer/refs/heads/3217_WIF_logic/templates/functions/gitlab_section_management.yml"
  - remote: "https://raw.githubusercontent.com/sparkfabrik/spark-k8s-deployer/master/templates/jobs/cloudsql-db-dump.yml"
  - remote: "https://raw.githubusercontent.com/sparkfabrik/spark-k8s-deployer/master/templates/jobs/drupal-phpqa.yml"
  - remote: "https://raw.githubusercontent.com/sparkfabrik/spark-k8s-deployer/master/templates/jobs/enable-buildx.yml"
  - remote: "https://raw.githubusercontent.com/sparkfabrik/spark-k8s-deployer/master/templates/jobs/gcloud-load-balancer-l7-cdn.yml"
  - remote: "https://raw.githubusercontent.com/sparkfabrik/spark-k8s-deployer/master/templates/jobs/gitlab-agent.yml"
  - remote: "https://raw.githubusercontent.com/sparkfabrik/spark-k8s-deployer/master/templates/jobs/rollback-release.yml"
  - remote: "https://raw.githubusercontent.com/sparkfabrik/spark-k8s-deployer/master/templates/jobs/stop-environment.yml"
